// This controller will inherit CRUD actions from its base controller implementation
// Go ahead and try to POST a new user to /user

var config = require('../../config/config.js');
	
// callback of callback :(
function sendEmail(req, cb){
	var email = req.param('email');
	Service.user.findByEmail(email, function(err, user){
		if(err)
		   cb(err, {errId: 'Email_Address_Not_Exist', err: err});
		else{
			var accessToken = Service.token.sign({email: email, expiryAt: new Date().getTime() + config.nodemailer.password_expiry_ms });
			var link = config.nodemailer.password_reset_link + "?token=" + accessToken;
			var msg = '<html>Hello there, </br>Greetings from boxychat, this is your password reset link, click <a href="' + link + '">here</a></html>';
			console.log("send password reset email out to " + email);
			var emailObj = {
					'name' : config.nodemailer.name,
					'from' : config.nodemailer.from,
    				'to' :		email,
    				'subject' : config.nodemailer.passwordReset_subject,
    				'messageHtml' : msg
    		};  
    		
    		Service.mail.send(emailObj, function(err, response){
    			if(err)
    				 cb(err, {errId: 'Send_Email_Failure', err: err});
    			else{
    				 cb(null, {access_token: accessToken});
    			}
    		});
			
		}	
	});	
}

module.exports = {
    model: 'user', // If no model is specified, CRUD actions won't be inherited
    actions: {
        // Custom actions can be added
        // The action keys must be in this format:
        // 'verb /route'
        'get /hello': function (req, res, next) {
            res.send('Hello world!');
        },
        
        'get /forgotpassword': function(req, res, next){
        	var cb = function(err, msg){
        		if(err)
        			return res.json({status: 'error', data: msg});
        		else	     			
        			return res.json({status: 'success', data: msg});
        	};
        	
        	sendEmail(req, cb);
        },
        
        //this API is protected by the access token generated by /forgotpassword API
        //assume the token is verified already
        'post /passwordReset' : function(req, res, next){
        	var email = req.param('email');
        	var pass = req.param('password');
        	var confirm = req.param('confirm');
        	
        	Service.crypt.generate({saltComplexity: 10}, pass, function (err, hash) {
        		console.log("password for " + email + " is reset");
        		Model.user.update({email: email}, {password: hash}, function(err, model){
        			if(err) return res.json(500, { err: err });
        			else if(!model || model.length == 0) 
        				return res.json(400, { err: 'email address not found' });
        			else	
        				res.json(model);
        		});
        	});
        },
        
        // Override the inherited read action
        'get /:id': function(req, res, next){
            var err = new Error('Not authorized!');
            err.status = 401;
            next(err);
        },       
    }
};